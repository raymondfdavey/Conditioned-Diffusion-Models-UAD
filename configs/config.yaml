# @package _global_
# config.yaml (root)
# ├── trainer/default.yaml (training parameters)
# ├── model/DDPM_2D.yaml (base model architecture)
# ├── datamodule/IXI.yaml (dataset configuration)
# ├── callbacks/checkpoint.yaml (callback settings)
# ├── logger/wandb.yaml (logging settings)
# ├── experiment/DDPM_cond_spark_2D.yaml (specific experiment config)
# └── mode/default.yaml (runtime mode settings)

# specify here default training configuration
defaults:
  - _self_
  - trainer: default.yaml
  - model: DDPM_2D.yaml
  - datamodule: IXI.yaml
  #!
  - callbacks: 
    - checkpoint.yaml # set this to null if you don't want to use callbacks
  - logger: # set logger here or use command line (e.g. `python run.py logger=wandb`)
    - wandb
    - csv 
  # - callbacks: null
  # - logger: null
  - experiment: DDPM.yaml # set experiment here or use command line (e.g. `python run.py experiment=DDPM`) 
  - mode: default.yaml
  # enable color logging
  - override hydra/hydra_logging: colorlog
  - override hydra/job_logging: colorlog
    
# path to original working directory
# hydra hijacks working directory by changing it to the current log directory,
# so it's useful to have this path as a special variable
# learn more here: https://hydra.cc/docs/next/tutorials/basic/running_your_app/working_directory
work_dir: ${hydra:runtime.cwd}

# path to folder with data 
data_dir:  ${oc.env:DATA_DIR}
log_dir:  ${oc.env:LOG_DIR} 
name : ${experiment.name}
# use `python run.py debug=true` for easy debugging!
# this will run 1 train, val and test loop with only 1 batch
# equivalent to running `python run.py trainer.fast_dev_run=true`
# (this is placed here just for easier access from command line)
debug: False

# pretty print config at the start of the run using Rich library
print_config: False

# disable python warnings if they annoy you
ignore_warnings: False

# check performance on test set, using the best model achieved during training
# lightning chooses best model based on metric specified in checkpoint callback

checkpoint: 'best' # which checkpoints to load


new_wandb_run: True # if we want to reevaluate to a new wandb run 
test_after_training: False
onlyEval: False


# load_checkpoint: /home/rd81/projects/full_logs/logs/runs/DDPM_cond_2D_spark/DDPM_2D_IXI_DDPM_cond_2D_spark__2024-12-18_08-56-59
#!
#t2 win WSL
# load_checkpoint: /home/rd81/projects/full_logs/logs/runs/DDPM_cond_2D_spark/DDPM_2D_IXI_DDPM_cond_2D_spark__2024-11-20_09-55-08

#t1 win WSL
# load_checkpoint: /home/rd81/projects/full_logs/logs/runs/DDPM_cond_2D_spark/DDPM_2D_IXI_DDPM_cond_2D_spark__2024-11-25_13-54-17
